//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AluminiRepository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using Alumini.Core;
    
    public partial class db_Alumni_TestEntities : DbContext
    {
        public db_Alumni_TestEntities()
            : base("name=db_Alumni_TestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<GraduationYear> GraduationYears { get; set; }
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<CourseCategory> CourseCategories { get; set; }
        public virtual DbSet<Cours> Courses { get; set; }
        public virtual DbSet<EducationalDetail> EducationalDetails { get; set; }
        public virtual DbSet<FacultyWorkInfo> FacultyWorkInfoes { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<ProfessionalDetail> ProfessionalDetails { get; set; }
        public virtual DbSet<RelationshipStatu> RelationshipStatus { get; set; }
        public virtual DbSet<Salutation> Salutations { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<View_UserDetails> View_UserDetails { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<EventCategory> EventCategorys { get; set; }
        public virtual DbSet<UserPost_Comments> UserPost_Comments { get; set; }
        public virtual DbSet<UserPost_Files> UserPost_Files { get; set; }
        public virtual DbSet<UserPost_Images> UserPost_Images { get; set; }
        public virtual DbSet<UserPost_Likes> UserPost_Likes { get; set; }
        public virtual DbSet<UserPost> UserPosts { get; set; }
        public virtual DbSet<UserPosts_Visisble> UserPosts_Visisble { get; set; }
        public virtual DbSet<Def_Events> Def_Events { get; set; }
        public virtual DbSet<Event_Faqs> Event_Faqs { get; set; }
        public virtual DbSet<Event_Gallery> Event_Gallery { get; set; }
        public virtual DbSet<Event_TicketTypes> Event_TicketTypes { get; set; }
        public virtual DbSet<Event_UserSelections> Event_UserSelections { get; set; }
        public virtual DbSet<Events_UserBookings> Events_UserBookings { get; set; }
        public virtual DbSet<Event_UserPayments> Event_UserPayments { get; set; }
        public virtual DbSet<Event_AttendingStatus> Event_AttendingStatus { get; set; }
        public virtual DbSet<Job_FunctionalArea> Job_FunctionalArea { get; set; }
        public virtual DbSet<UserPosting_Jobs> UserPosting_Jobs { get; set; }
        public virtual DbSet<db_NewsRooms> db_NewsRooms { get; set; }
        public virtual DbSet<db_Memories_images> db_Memories_images { get; set; }
        public virtual DbSet<db_Memories_Info> db_Memories_Info { get; set; }
        public virtual DbSet<Donation_Details> Donation_Details { get; set; }
        public virtual DbSet<Donor_Details> Donor_Details { get; set; }
        public virtual DbSet<Transaction_Details> Transaction_Details { get; set; }
        public virtual DbSet<Album_Gallery> Album_Gallery { get; set; }
        public virtual DbSet<Album_Gallery_Images> Album_Gallery_Images { get; set; }
        public virtual DbSet<Alumni_Gallery> Alumni_Gallery { get; set; }
        public virtual DbSet<Alumni_ContactUs> Alumni_ContactUs { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Custome_Templates> Custome_Templates { get; set; }
        public virtual DbSet<Executive_board> Executive_board { get; set; }
        public virtual DbSet<Banner_Imags> Banner_Imags { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
